plugins {
	id 'java'
	id 'maven-publish'

	id 'idea'
	id 'eclipse'
	id("fabric-loom") version "0.5-SNAPSHOT"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

archivesBaseName = "fabric-loader"

// Fetch build number from Jenkins
def ENV = System.getenv()
version = version + "+" + (ENV.BUILD_NUMBER ? ("build." + ENV.BUILD_NUMBER) : "local")

repositories {
	mavenCentral()
	jcenter()
	maven {
		name = 'Fabric'
		url = 'https://maven.fabricmc.net/'
	}
	maven {
		name = 'mojang'
		url = 'https://libraries.minecraft.net/'
	}
}

dependencies {
	minecraft "com.mojang:minecraft:1.16.3"
	mappings "net.fabricmc:yarn:1.16.3+build.47:v2"

	// fabric-loader dependencies
	implementation "org.ow2.asm:asm:${project.asm_version}"
	implementation "org.ow2.asm:asm-analysis:${project.asm_version}"
	implementation "org.ow2.asm:asm-commons:${project.asm_version}"
	implementation "org.ow2.asm:asm-tree:${project.asm_version}"
	implementation "org.ow2.asm:asm-util:${project.asm_version}"

	// Required for mixin annotation processor
	annotationProcessor "org.ow2.asm:asm:${project.asm_version}"
	annotationProcessor "org.ow2.asm:asm-analysis:${project.asm_version}"
	annotationProcessor "org.ow2.asm:asm-commons:${project.asm_version}"
	annotationProcessor "org.ow2.asm:asm-tree:${project.asm_version}"
	annotationProcessor "org.ow2.asm:asm-util:${project.asm_version}"

	implementation('net.fabricmc:sponge-mixin:0.8.2+build.23') {
		exclude module: 'launchwrapper'
		exclude module: 'guava'
	}
	implementation 'net.fabricmc:tiny-mappings-parser:0.2.2.14'
	implementation 'net.fabricmc:tiny-remapper:0.3.0.70'

	implementation 'com.google.jimfs:jimfs:1.2-fabric'
	implementation 'net.fabricmc:fabric-loader-sat4j:2.3.5.4'

	// launchwrapper + dependencies
	implementation ('net.minecraft:launchwrapper:1.12') {
		transitive = false
	}
	implementation 'net.sf.jopt-simple:jopt-simple:5.0.3'

	testCompileOnly 'org.jetbrains:annotations:19.0.0'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

jar {
	manifest {
		attributes (
			'Main-Class': 'net.fabricmc.loader.launch.server.FabricServerLauncher'
		)
	}
}

task copyJson(type: Copy, dependsOn: ["remapJar"]) {
	from('src/main/resources/fabric-installer.json') {
		rename { "${archivesBaseName}-${version}.json" }
	}
	into 'build/libs'
}

task copyJsonLw(type: Copy, dependsOn: ["remapJar"]) {
	from('src/main/resources/fabric-installer.launchwrapper.json') {
		rename { "${archivesBaseName}-${version}.launchwrapper.json" }
	}
	into 'build/libs'
}

tasks.build.dependsOn "copyJson"
tasks.build.dependsOn "copyJsonLw"

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

javadoc {
	options {
		if (file("README.html").exists()) {
			overview = "README.html"
		}
		source = "8"
		encoding = 'UTF-8'
		charSet = 'UTF-8'
		memberLevel = JavadocMemberLevel.PACKAGE
		links(
				'https://asm.ow2.io/javadoc/',
				'https://docs.oracle.com/javase/8/docs/api/',
				'https://logging.apache.org/log4j/2.x/log4j-api/apidocs/'
		)
		// Disable the crazy super-strict doclint tool in Java 8
		addStringOption('Xdoclint:none', '-quiet')
	}
	source sourceSets.main.allJava.srcDirs
	classpath = sourceSets.main.compileClasspath + sourceSets.main.output // compile impl stuff for dep as well
	include("**/api/**")
	// workaround as one of the api stuff use that package
	failOnError false
}

task javadocJar(type: Jar) {
	dependsOn javadoc
	from javadoc.destinationDir
	classifier = 'javadoc'
}
build.dependsOn javadocJar

publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(file("${project.buildDir}/libs/$archivesBaseName-${version}.jar")) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
			artifact javadocJar
			artifact(file('src/main/resources/fabric-installer.json')) {
				builtBy remapJar
			}
			artifact(file('src/main/resources/fabric-installer.launchwrapper.json')) {
				builtBy remapJar
				classifier = "launchwrapper"
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		if (project.hasProperty('mavenPass')) {
			maven {
				url = "http://mavenupload.modmuss50.me/"
				credentials {
					username = "buildslave"
					password = project.getProperty('mavenPass')
				}
			}
		}
	}
}
apply from: 'https://github.com/FabricMC/fabric-docs/raw/master/gradle/license.gradle'
apply from: 'https://github.com/FabricMC/fabric-docs/raw/master/gradle/ideconfig.gradle'
